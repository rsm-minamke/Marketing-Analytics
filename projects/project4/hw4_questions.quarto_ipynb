{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Latent class MNL and KNN\"\n",
        "author: \"Mrunmayee Inamke\"\n",
        "date: today\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Latent Class Multinomial Logit (LC-MNL) Model\n",
        "\n",
        "In this project, we develop and estimate a **Latent Class Multinomial Logit (LC-MNL)** model using data on consumer yogurt purchases. The LC-MNL model enhances the standard Multinomial Logit (MNL) approach by accounting for **unobserved heterogeneity** in consumer preferences. While the MNL model assumes a homogeneous population where all individuals share the same utility parameters, the LC-MNL model allows for **multiple latent (hidden) classes** of decision-makers, each with distinct choice behaviors.\n",
        "\n",
        "By segmenting individuals into these latent classes, we can capture varying sensitivities to product attributes, such as price and promotional features, providing a richer understanding of consumer behavior.\n",
        "\n",
        "### Model Framework\n",
        "\n",
        "The utility that individual $n$ derives from choosing alternative $j$ within class $s$ is modeled as:\n",
        "\n",
        "$$\n",
        "U_{nj}^{(s)} = X_{nj}'\\beta_s + \\varepsilon_{nj}\n",
        "$$\n",
        "\n",
        "where:\n",
        "\n",
        "- $X_{nj}$ is a vector of observed attributes for alternative $j$ as faced by individual $n$,\n",
        "- $\\beta_s$ is a vector of class-specific coefficients for class $s$,\n",
        "- $\\varepsilon_{nj}$ is an idiosyncratic error term assumed to follow an i.i.d. Gumbel distribution.\n",
        "\n",
        "Each individual has a probability $\\pi_s$ of belonging to latent class $s$, such that:\n",
        "\n",
        "$$\n",
        "\\sum_{s=1}^{S} \\pi_s = 1\n",
        "$$\n",
        "\n",
        "The unconditional probability that individual $n$ chooses alternative $j$ is computed by integrating over all classes:\n",
        "\n",
        "$$\n",
        "P_{nj} = \\sum_{s=1}^{S} \\pi_s \\cdot \\frac{\\exp(X_{nj}'\\beta_s)}{\\sum_{k=1}^{J} \\exp(X_{nk}'\\beta_s)}\n",
        "$$\n",
        "\n",
        "This formulation allows each class to have its own set of preferences, with the class membership probabilities $\\pi_s$ acting as mixture weights.\n",
        "\n",
        "### Role of Alternative-Specific Constants (ASCs)\n",
        "\n",
        "To capture unmeasured factors that systematically affect utility for certain products, we include **Alternative-Specific Constants (ASCs)** in our utility specification. ASCs reflect inherent preferences for each product, above and beyond observed features such as price or promotional display. The utility function becomes:\n",
        "\n",
        "$$\n",
        "U_{nj} = ASC_j + \\beta_1 \\cdot \\text{price}_{nj} + \\beta_2 \\cdot \\text{featured}_{nj} + \\varepsilon_{nj}\n",
        "$$\n",
        "\n",
        "Here:\n",
        "\n",
        "- $ASC_j$ is the constant for alternative $j$, omitted for one base product to avoid perfect multicollinearity,\n",
        "- $\\text{price}_{nj}$ is the price per ounce of the product,\n",
        "- $\\text{featured}_{nj}$ is a binary indicator of whether the product was on promotion.\n",
        "\n",
        "ASCs capture relative preferences between products when all other observed attributes are held constant.\n",
        "\n",
        "### Dataset Description\n",
        "\n",
        "The yogurt dataset includes:\n",
        "\n",
        "- `id`: An anonymized identifier for each consumer,\n",
        "- `y1`–`y4`: Indicators denoting the yogurt product chosen during each purchase instance,\n",
        "- `p1`–`p4`: Prices of the four yogurt products (in price-per-ounce),\n",
        "- `f1`–`f4`: Binary indicators for whether each product was \"featured\" (i.e., on promotional display) during the purchase.\n",
        "\n",
        "For example, if a consumer with ID `1` purchased yogurt product 4 at a price of \\$0.079 per ounce and none of the yogurts were promoted, this would be encoded by setting `y4 = 1`, `p4 = 0.079`, and all `f1` to `f4` equal to `0`.\n",
        "\n",
        "This dataset structure allows us to analyze how consumers trade off price and promotional status when making their yogurt choices—and how these tradeoffs differ across latent segments of the population.\n",
        "\n",
        "### Goals of This Analysis\n",
        "\n",
        "By estimating a latent class MNL model, we aim to:\n",
        "\n",
        "- Identify distinct consumer segments based on their price sensitivity and responsiveness to promotions,\n",
        "- Quantify heterogeneity in preferences across these latent segments,\n",
        "- Improve predictive performance relative to a standard MNL model by accommodating unobserved preference variation.\n",
        "\n",
        "The next sections will cover data preprocessing, model estimation, and interpretation of results.\n"
      ],
      "id": "1b9df618"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "yog_data = pd.read_csv('yogurt_data.csv')\n",
        "yog_data.head(10)"
      ],
      "id": "3f1803e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We will first reshape this dataset from wide to long format"
      ],
      "id": "8c88514e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## Reshape dataset \n",
        "# Reshape dataset \n",
        "yog_data = pd.wide_to_long(yog_data,\n",
        "                          stubnames=['y', 'f', 'p'],\n",
        "                          i='id',\n",
        "                          j='product',\n",
        "                          sep='',\n",
        "                          suffix='[1-4]').reset_index()\n",
        "\n",
        "# Rename columns for clarity\n",
        "yog_data = yog_data.rename(columns={\n",
        "    'y': 'chosen',\n",
        "    'f': 'featured',\n",
        "    'p': 'price'\n",
        "})\n",
        "yog_data.head(10)"
      ],
      "id": "f21967d5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In the above reshaped data, each row represents a consumer–product combination with with data about if the product was chosen by the consumer, if the product was featured abd the price per ounce for that product.\n",
        "\n",
        "\n",
        "### Standard Multinomial Logit (MNL) Model on Yogurt Data\n",
        "\n",
        "Before implementing more advanced models such as Latent Class MNL, we begin by fitting a **standard Multinomial Logit (MNL)** model using the yogurt dataset. This serves as a useful benchmark and helps build foundational understanding of how product attributes influence consumer choices.\n",
        "\n",
        "To estimate the MNL model, we use a **long-format (reshaped) dataset** where each row represents an alternative within a choice situation. The model will estimate the probability of each alternative being chosen, given its attributes (e.g., price and featured status).\n",
        "\n",
        "### Encoding Alternatives as Dummy Variables\n",
        "\n",
        "When using libraries such as `statsmodels` in Python, **Alternative-Specific Constants (ASCs)** are not automatically generated from categorical variables such as product identifiers. Unlike R packages (e.g., `mlogit`) which handle these internally, in Python we must **explicitly create dummy variables** to account for baseline preferences across alternatives.\n",
        "\n",
        "To incorporate ASCs in our model, we perform the following steps:\n",
        "\n",
        "#### 1. One-Hot Encode the Product Variable\n",
        "\n",
        "We begin by transforming the `product` identifier into **dummy variables** using one-hot encoding. Each product is represented as a binary column indicating its presence in the current row. \n",
        "\n",
        "To avoid the **dummy variable trap** (perfect multicollinearity), we drop one of the product columns—typically for product 1—and treat it as the **reference category**. The resulting dummies become proxies for ASCs. They measure how much more or less preferred each product is compared to the base alternative, after controlling for observed features like price and promotion.\n",
        "\n",
        "Without ASCs, the MNL model would incorrectly assume that all products are equally attractive when their observable attributes are the same, which is often unrealistic in real-world markets.\n",
        "\n",
        "#### 2. Merge Dummy Variables into the Dataset\n",
        "\n",
        "Once the dummy variables are created, we append them to the original dataset. These columns are now part of the explanatory variables used in the MNL estimation. Together with `price` and `featured`, these product dummies allow us to model both **measurable** and **inherent** product appeal.\n",
        "\n",
        "This setup results in a model specification of the form:\n",
        "\n",
        "$$\n",
        "U_{nj} = ASC_j + \\beta_1 \\cdot \\text{price}_{nj} + \\beta_2 \\cdot \\text{featured}_{nj} + \\varepsilon_{nj}\n",
        "$$\n",
        "\n",
        "Where:\n",
        "\n",
        "- $ASC_j$ is the dummy variable for product $j$ (excluding the base category),\n",
        "- $\\text{price}_{nj}$ is the price per ounce of alternative $j$ for individual $n$,\n",
        "- $\\text{featured}_{nj}$ is a binary variable indicating whether the product was on promotion.\n",
        "\n",
        "### Python Implementation\n",
        "\n",
        "Below, we present the Python code that performs these steps—generating one-hot encoded product variables and merging them with the dataset. This prepares the data for estimation using a discrete choice modeling package such as `statsmodels.discrete.discrete_model.MNLogit` or `pylogit`."
      ],
      "id": "69ee2a32"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Dependent variable: whether the product was chosen (1 if chosen, 0 otherwise)\n",
        "target = yogurt_data['chosen']\n",
        "target"
      ],
      "id": "60602ebc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The above data is our dependent variable."
      ],
      "id": "b025b0ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Fit the Multinomial Logit model\n",
        "model = sm.MNLogit(target, X)\n",
        "result = model.fit()\n",
        "\n",
        "# Show model summary\n",
        "result.summary()"
      ],
      "id": "8b44962a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "From the above summary we see, that\n",
        "\n",
        "- Price has a very strong negative effect on the choice. Even a small increase in price substantially  reduced the choice probability.\n",
        "\n",
        "- Featured promotions positively impact the consumer decision. This effect is small.\n",
        "\n",
        "- Product 1 is the most preferred product and Product 2 is least preferred.\n",
        "\n",
        "### Latent class MNL model on Yogurt dataset\n",
        "Next, we will fit a Latent-class MNL on the same data."
      ],
      "id": "282e4295"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pip install biogeme"
      ],
      "id": "e7513d9d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import biogeme.database as db\n",
        "import biogeme.biogeme as bio\n",
        "from biogeme.expressions import Beta, log, exp\n",
        "from biogeme import models\n",
        "\n",
        "def lc_mnl(K, df):\n",
        "    database = db.Database(\"yogurt\", df)\n",
        "    database.variables['Choice'] = df['chosen']\n",
        "    av = {1: 1, 2: 1, 3: 1, 4: 1}\n",
        "\n",
        "    class_utilities = []\n",
        "    membership_betas = []\n",
        "\n",
        "    for k in range(1, K + 1):\n",
        "        ASC2 = Beta(f'ASC2_class{k}', 0, None, None, 0)\n",
        "        ASC3 = Beta(f'ASC3_class{k}', 0, None, None, 0)\n",
        "        ASC4 = Beta(f'ASC4_class{k}', 0, None, None, 0)\n",
        "        B_PRICE = Beta(f'B_PRICE_class{k}', 0, None, None, 0)\n",
        "        B_FEAT = Beta(f'B_FEAT_class{k}', 0, None, None, 0)\n",
        "\n",
        "        V = {\n",
        "            1: 0,\n",
        "            2: ASC2 + B_PRICE * database.variables['price'] + B_FEAT * database.variables['featured'],\n",
        "            3: ASC3 + B_PRICE * database.variables['price'] + B_FEAT * database.variables['featured'],\n",
        "            4: ASC4 + B_PRICE * database.variables['price'] + B_FEAT * database.variables['featured']\n",
        "        }\n",
        "\n",
        "        logprob = models.loglogit(V, av, database.variables['product'])\n",
        "        class_utilities.append(logprob)\n",
        "\n",
        "        if k < K:\n",
        "            pi_k = Beta(f'PI_{k}', 1.0 / K, 0.0001, 0.9999, 0)\n",
        "            membership_betas.append(pi_k)\n",
        "\n",
        "    if K == 2:\n",
        "        PI = [membership_betas[0], 1 - membership_betas[0]]\n",
        "    else:\n",
        "        exp_terms = [exp(beta) for beta in membership_betas]\n",
        "        denominator = sum(exp_terms) + 1\n",
        "        PI = [term / denominator for term in exp_terms]\n",
        "        PI.append(1 - sum(PI))\n",
        "\n",
        "    loglikelihood = log(sum([PI[k] * exp(class_utilities[k]) for k in range(K)]))\n",
        "    biogeme_model = bio.BIOGEME(database, loglikelihood)\n",
        "    biogeme_model.modelName = f\"LC_MNL_{K}classes\"\n",
        "    results = biogeme_model.estimate()\n",
        "\n",
        "    return {\n",
        "        \"K\": K,\n",
        "        \"LogLikelihood\": results.data.logLike,\n",
        "        \"NumParams\": results.data.nparam,\n",
        "        \"BIC\": -2 * results.data.logLike + results.data.nparam * np.log(df['id'].nunique()),\n",
        "        \"Parameters\": results.get_estimated_parameters()\n",
        "    }\n"
      ],
      "id": "a5fb142d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Selecting the Optimal Number of Latent Classes\n",
        "\n",
        "A crucial step in estimating Latent Class Multinomial Logit (LC-MNL) models is determining how many latent classes best represent the heterogeneity in the population. Rather than arbitrarily choosing a number of classes, we systematically estimate models with varying class counts—typically 2, 3, 4, and 5—and compare them using a formal model selection criterion.\n",
        "\n",
        "### Model Comparison Using BIC\n",
        "\n",
        "To evaluate and compare the fitted models, we employ the **Bayesian Information Criterion (BIC)**, a widely used metric that balances **goodness-of-fit** with **model complexity**. The BIC for a model is calculated using the formula:\n",
        "\n",
        "$$\n",
        "BIC = -2 \\cdot \\ell_n + k \\cdot \\log(n)\n",
        "$$\n",
        "\n",
        "Where:\n",
        "\n",
        "- \\( \\ell_n \\) is the log-likelihood of the model evaluated at convergence,\n",
        "- \\( n \\) is the number of observations in the dataset,\n",
        "- \\( k \\) is the total number of estimated parameters in the model.\n",
        "\n",
        "The BIC penalizes models for having a large number of parameters, discouraging overfitting. While models with more classes typically achieve higher log-likelihood values, this improvement must be large enough to offset the BIC penalty incurred by additional complexity.\n",
        "\n",
        "### Interpreting BIC in LC-MNL Context\n",
        "\n",
        "In LC-MNL models, each additional latent class introduces:\n",
        "\n",
        "- A new set of **class-specific utility parameters** (e.g., price and promotion coefficients),\n",
        "- An additional **class probability parameter** (subject to a sum-to-one constraint).\n",
        "\n",
        "As a result, the parameter count grows quickly with each added class. Although this flexibility may enhance model fit, it can also lead to overfitting, particularly if some latent classes capture noise rather than meaningful segments of behavior.\n",
        "\n",
        "The BIC is specifically designed to mitigate this risk. It rewards models that strike a good balance between fit and simplicity. A **lower BIC value indicates a better model**, with the preferred number of classes being the one that minimizes the BIC across all candidate models.\n",
        "\n",
        "### Implementation Strategy\n",
        "\n",
        "The typical workflow for selecting the optimal number of latent classes is as follows:\n",
        "\n",
        "1. **Estimate LC-MNL models** for 2, 3, 4, and 5 classes using maximum likelihood estimation.\n",
        "2. **Compute BIC** for each model using the formula above.\n",
        "3. **Compare BIC values** across models to identify the lowest score.\n",
        "4. **Select the model** with the minimum BIC as the optimal latent class solution.\n",
        "\n",
        "This procedure provides a principled way to uncover meaningful consumer segments without relying on arbitrary assumptions about how many classes exist.\n",
        "\n",
        "The following section will walk through the estimation and comparison process using actual yogurt purchase data.\n"
      ],
      "id": "e4a5d255"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "results = []\n",
        "for K in range(2, 6):\n",
        "    print(f\"Estimating model for {K} classes...\")\n",
        "    res = lc_mnl(K, yogurt_data)\n",
        "    results.append(res)\n",
        "    #print(f\"Estimated parameters for K = {K}:\")\n",
        "    #print(res[\"Parameters\"])\n",
        "\n",
        "bic = pd.DataFrame(results).sort_values(by='BIC')"
      ],
      "id": "55e62278",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "bic[['K', 'LogLikelihood', 'NumParams', 'BIC']]"
      ],
      "id": "8ae24a7f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The model with the lowest BIC is selected as the best-fitting model when balancing accuracy and simplicity. In our results, the 3-class model had the lowest BIC, suggesting that it best explains the data while avoiding unnecessary complexity.\n",
        "\n",
        "#### Comparison of Aggregate MNL vs. Latent-Class MNL (K = 3)\n",
        "\n",
        "Now we compare the parameter estimates between (1) the aggregate MNL, and (2) the latent-class MNL with the number of classes suggested by the BIC."
      ],
      "id": "32ad0fdc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "lc_mnl_3class_params = results[[res[\"K\"] for res in results_list].index(3)][\"Parameters\"].reset_index()\n",
        "lc_mnl_3class_params.columns\n",
        "class3_params = lc_mnl_3class_params.loc[lc_mnl_3class_params['index'].str.contains('_class3')]\n",
        "print(\"Class 3 parameter estimates\")\n",
        "print(class3_params)"
      ],
      "id": "648c4a3f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 1. Price Sensitivity\n",
        "\n",
        "| Model            | Price Coefficient        | Interpretation                                                |\n",
        "|------------------|--------------------------|----------------------------------------------------------------|\n",
        "| Aggregate MNL    | –31.98 (significant)     | Consumers are price-sensitive overall.                         |\n",
        "| LC-MNL Class 1   | –3317.95 (not significant) | Very large, likely unstable estimate.                          |\n",
        "| LC-MNL Class 2   | –2799.99 (**significant**) | Very strong price aversion.                                    |\n",
        "| LC-MNL Class 3   | +9820.02 (**significant**) | Counterintuitive: price increases utility (possible overfitting or perceived quality). |\n",
        "\n",
        "---\n",
        "\n",
        "#### 2. Featured Promotion\n",
        "\n",
        "| Model            | Featured Coefficient      | Interpretation                                               |\n",
        "|------------------|---------------------------|---------------------------------------------------------------|\n",
        "| Aggregate MNL    | +0.471 (significant)       | Promotion increases likelihood of choice.                    |\n",
        "| LC-MNL Class 1   | +13.75 (significant)       | Strong positive impact of being featured.                    |\n",
        "| LC-MNL Class 2   | +19.73 (significant)       | Even stronger promotional effect.                            |\n",
        "| LC-MNL Class 3   | –613.79 (significant)      | Strong negative effect — promotions deter choice.            |\n",
        "\n",
        "---\n",
        "\n",
        "#### 3. Alternative-Specific Constants (ASCs)\n",
        "\n",
        "| Product | Aggregate MNL | LC Class 1 | LC Class 2 | LC Class 3 |\n",
        "|---------|----------------|------------|------------|------------|\n",
        "| ASC2    | –0.5166         | –1.02       | +280.04     | –613.7     |\n",
        "| ASC3    | –4.5584         | +222.88     | +0.86       | –618.34     |\n",
        "| ASC4    | –1.4179         | –2.92       | +279.78     | –613.05     |\n",
        "\n",
        "Interpretation:\n",
        "- LC-MNL reveals stark contrasts between classes.\n",
        "- Class 2 prefers all products highly.\n",
        "- Class 3 strongly disfavors all alternatives — unusual, possibly unstable.\n",
        "\n",
        "---\n",
        "\n",
        "#### 4. Class Membership Probabilities\n",
        "\n",
        "| Class    | Share (PI) | Interpretation                                       |\n",
        "|----------|------------|------------------------------------------------------|\n",
        "| Class 1  | 0.730       | Majority: strong effects for price and promotion.   |\n",
        "| Class 2  | 0.999       | Possibly absorbing similar behavior as Class 1.     |\n",
        "| Class 3  | ~0          | Tiny segment with extreme (and conflicting) effects.|\n",
        "\n",
        "---\n",
        "\n",
        "#### **Conclusion: Uncovering Preference Heterogeneity with LC-MNL**\n",
        "\n",
        "The **aggregate Multinomial Logit (MNL)** model offers a reliable and interpretable baseline for understanding consumer choice behavior. It reveals that, on average, consumers display **moderate sensitivity to price** and a **positive response to promotional features**. However, this summary masks the diverse and nuanced preferences that exist across individuals.\n",
        "\n",
        "In contrast, the **Latent Class MNL (LC-MNL)** model, particularly with three latent classes, reveals **substantial heterogeneity** in how consumers make trade-offs:\n",
        "\n",
        "- **Class 1** closely mirrors the behavior identified in the aggregate MNL model, representing the \"average\" or mainstream consumer segment.\n",
        "- **Class 2** exhibits **amplified sensitivity to promotions**, suggesting that these individuals are especially responsive to store advertisements or featured product placements.\n",
        "- **Class 3** demonstrates **atypical behavior**, showing a **negative reaction to promotions** and a **preference for higher-priced options**. This counterintuitive pattern may reflect a niche group of consumers, potential outliers, or issues related to data sparsity and overfitting within that segment.\n",
        "\n",
        "These findings underscore the **value of latent class modeling** in surfacing complex and diverse decision-making patterns that a single, population-level model might obscure. However, this added flexibility comes with responsibilities:\n",
        "\n",
        "- **Interpretation must be handled with care**, especially for small or extreme segments where model estimates may be unstable.\n",
        "- Researchers should ensure that classes are **robust and reproducible**, potentially validating them with external data or follow-up surveys.\n",
        "\n",
        "Ultimately, the LC-MNL framework transforms consumer modeling from a one-size-fits-all lens into a **segmentation-driven approach**, offering deeper insights for targeting, pricing strategies, and promotional design.\n",
        "\n",
        "---\n",
        "\n",
        "## K Nearest Neighbors (KNN)\n",
        "\n",
        "### Intuition and Workflow\n",
        "\n",
        "The **K Nearest Neighbors (KNN)** algorithm is a non-parametric, instance-based learning method used for both **classification** and **regression** tasks. It operates on a simple yet powerful premise: **similar observations tend to have similar outcomes**.\n",
        "\n",
        "To classify a new observation \\( x_{\\text{test}} \\), the algorithm follows these steps:\n",
        "\n",
        "1. **Compute distances** between \\( x_{\\text{test}} \\) and all training data points \\( x_i \\), typically using metrics such as **Euclidean** or **Manhattan** distance.\n",
        "2. **Identify the \\( k \\) nearest neighbors** — that is, the \\( k \\) training points with the smallest distances to \\( x_{\\text{test}} \\).\n",
        "3. **Determine the majority class** among these neighbors. The most frequent label becomes the predicted class for \\( x_{\\text{test}} \\).\n",
        "\n",
        "This approach is highly intuitive and adaptive. It makes no assumptions about the underlying data distribution, making it well-suited for complex or irregular decision boundaries. However, its performance can be sensitive to:\n",
        "\n",
        "- The choice of \\( k \\),\n",
        "- The scaling of features,\n",
        "- The presence of irrelevant or noisy variables.\n",
        "\n",
        "In the sections that follow, we will apply KNN to classify consumer segments, evaluate performance using cross-validation, and visualize decision boundaries to better understand its behavior in high-dimensional space.\n",
        "\n",
        "\n",
        "### Euclidean Distance: Measuring Similarity in Feature Space\n",
        "\n",
        "At the heart of the K Nearest Neighbors (KNN) algorithm lies the concept of **distance**. To determine how similar two data points are, we often use the **Euclidean distance**, a standard and intuitive metric that corresponds to the straight-line distance between two points in space.\n",
        "\n",
        "Given two feature vectors  \n",
        "\\( x = (x_1, x_2, \\dots, x_d) \\) and  \n",
        "\\( z = (z_1, z_2, \\dots, z_d) \\),  \n",
        "the Euclidean distance between them is computed as:\n",
        "\n",
        "$$\n",
        "d(x, z) = \\sqrt{(x_1 - z_1)^2 + (x_2 - z_2)^2 + \\cdots + (x_d - z_d)^2}\n",
        "$$\n",
        "\n",
        "In the special case where each observation lies in two-dimensional space (i.e., two features), the formula simplifies to:\n",
        "\n",
        "$$\n",
        "d((x_1, x_2), (z_1, z_2)) = \\sqrt{(x_1 - z_1)^2 + (x_2 - z_2)^2}\n",
        "$$\n",
        "\n",
        "This distance metric quantifies how \"close\" two points are in the feature space and directly drives the neighbor selection process in KNN.\n",
        "\n",
        "---\n",
        "\n",
        "### Decision Rule in KNN Classification\n",
        "\n",
        "Once the distances are computed, KNN identifies the \\( k \\) most similar (i.e., nearest) training instances and bases its prediction on their labels. Let \\( \\mathcal{N}_k(x) \\) represent the set of indices for the \\( k \\) nearest neighbors of point \\( x \\). Then the predicted class label \\( \\hat{y} \\) is given by:\n",
        "\n",
        "$$\n",
        "\\hat{y} = \\arg\\max_{c \\in \\{0,1\\}} \\sum_{i \\in \\mathcal{N}_k(x)} \\mathbb{1}(y_i = c)\n",
        "$$\n",
        "\n",
        "Where:\n",
        "\n",
        "- \\( \\mathbb{1}(y_i = c) \\) is an **indicator function** that returns 1 if neighbor \\( i \\)'s true label is class \\( c \\), and 0 otherwise.\n",
        "- The sum counts how many of the \\( k \\) neighbors belong to class \\( c \\).\n",
        "- The predicted class is the one with the highest vote.\n",
        "\n",
        "This **majority voting mechanism** is simple yet powerful, especially when decision boundaries are irregular or nonlinear.\n",
        "\n",
        "---\n",
        "\n",
        "### How to Choose the Right Value of \\( k \\)\n",
        "\n",
        "The choice of \\( k \\) significantly impacts the model’s behavior and performance:\n",
        "\n",
        "- **Small values of \\( k \\)** (e.g., \\( k = 1 \\)) can lead to high variance. The model may fit tightly to noise or outliers, resulting in overfitting.\n",
        "- **Larger values of \\( k \\)** lead to smoother decision boundaries by incorporating a broader neighborhood, which may underfit if the class distributions are not well-separated.\n",
        "- **Optimal \\( k \\)** is typically determined using **cross-validation**, where different values of \\( k \\) are evaluated on held-out data to identify the best-performing option.\n",
        "\n",
        "There is no universal best value — it must be tuned based on the dataset and the task at hand.\n",
        "\n",
        "---\n",
        "\n",
        "### Practical Walkthrough: KNN on Synthetic Data\n",
        "\n",
        "To better understand how KNN operates, we will conduct an illustrative example using a **synthetic dataset**. This controlled setting will help us visualize how KNN makes decisions in a two-dimensional feature space.\n",
        "\n",
        "In particular, we will:\n",
        "\n",
        "1. **Generate synthetic data** with two continuous features, `x1` and `x2`, and a binary response `y`.\n",
        "2. **Define a nonlinear decision boundary**: Class membership will depend on whether a point lies above or below a sinusoidal curve — creating a challenging pattern for classification.\n",
        "3. **Implement KNN from scratch**, exploring how the algorithm reacts to different values of \\( k \\).\n",
        "4. **Compare our custom implementation** with built-in classifiers from popular Python libraries.\n",
        "5. **Evaluate and visualize performance**, demonstrating how accuracy and boundary flexibility evolve with changes in \\( k \\).\n"
      ],
      "id": "2e8f7f36"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Generate data\n",
        "np.random.seed(42)\n",
        "n = 100\n",
        "x1 = np.random.uniform(-3, 3, n)\n",
        "x2 = np.random.uniform(-3, 3, n)\n",
        "\n",
        "boundary = np.sin(4 * x1) + x1\n",
        "y = (x2 > boundary).astype(int)\n",
        "\n",
        "random_df = pd.DataFrame({'x1': x1, 'x2': x2, 'y': y})\n",
        "random_df"
      ],
      "id": "1305bbca",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We can visualize the dataset in 2D, using color to represent the binary class (y). We also overlay the wiggly boundary that separates the two classes."
      ],
      "id": "d2a55487"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.figure(figsize=(8,6))\n",
        "plt.scatter(random_df['x1'], random_df['x2'], c=random_df['y'], cmap='bwr', edgecolor='k')\n",
        "x_line = np.linspace(-3, 3, 500)\n",
        "boundary_line = np.sin(4 * x_line) + x_line\n",
        "plt.plot(x_line, boundary_line, 'k--', label='Boundary')\n",
        "plt.xlabel('x1')\n",
        "plt.ylabel('x2')\n",
        "plt.title('Synthetic Dataset')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "id": "02f09a1b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "To evaluate the generalization performance of our model, we create a new test dataset using a different random seed. This ensures the test data is independent of the training set."
      ],
      "id": "bb6083ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.random.seed(19)  # different seed\n",
        "x1_test = np.random.uniform(-3, 3, n)\n",
        "x2_test = np.random.uniform(-3, 3, n)\n",
        "boundary_test = np.sin(4 * x1_test) + x1_test\n",
        "y_test = (x2_test > boundary_test).astype(int)\n",
        "\n",
        "test_df = pd.DataFrame({'x1': x1_test, 'x2': x2_test, 'y': y_test})\n",
        "test_df"
      ],
      "id": "ea908bcb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### KNN implementation by hand Vs KNeighborsClassifier\n",
        "Here we define a custom KNN classifier using the Euclidean distance between test and training points. For each test instance, the k closest neighbors are selected, and the predicted class is determined by majority vote.\n"
      ],
      "id": "dccc026f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "from scipy.spatial import distance\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "def knn_predict(X_train, y_train, X_test, k):\n",
        "    y_pred = []\n",
        "    for test_point in X_test:\n",
        "        dists = [distance.euclidean(test_point, train_point) for train_point in X_train]\n",
        "        knn_indices = np.argsort(dists)[:k]\n",
        "        knn_labels = y_train[knn_indices]\n",
        "        # Use np.bincount safely: labels must be integers starting from 0\n",
        "        # If labels are 0 and 1, this is fine\n",
        "        majority_vote = np.argmax(np.bincount(knn_labels))\n",
        "        y_pred.append(majority_vote)\n",
        "    return np.array(y_pred)\n",
        "\n",
        "# Prepare train and test datasets\n",
        "X_train = df[['x1', 'x2']].values\n",
        "y_train = df['y'].values.astype(int)  # convert to int\n",
        "X_test = test_df[['x1', 'x2']].values\n",
        "y_test = test_df['y'].values.astype(int)  # convert to int\n",
        "\n",
        "# Convert y arrays to numpy integer arrays if needed\n",
        "y_train = np.array(y_train).astype(int)\n",
        "y_test = np.array(y_test).astype(int)\n",
        "\n",
        "# Built-in KNN classifier\n",
        "clf = KNeighborsClassifier(n_neighbors=5)\n",
        "clf.fit(X_train, y_train)\n",
        "y_lib_pred = clf.predict(X_test)\n",
        "\n",
        "# Your manual KNN prediction\n",
        "y_hand_pred = knn_predict(X_train, y_train, X_test, k=5)\n",
        "\n",
        "# Compare predictions\n",
        "print(\"Hand-coded KNN accuracy:\", accuracy_score(y_test, y_hand_pred))\n",
        "print(\"Library KNN accuracy:   \", accuracy_score(y_test, y_lib_pred))\n"
      ],
      "id": "5502bf93",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we run our custom KNN function across a range of k values (from 1 to 30) to observe how accuracy varies. This helps us identify the optimal value of k that balances underfitting and overfitting."
      ],
      "id": "68dad4f3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "X_train = df[['x1', 'x2']].values\n",
        "y_train = df['y'].values\n",
        "X_test = test_df[['x1', 'x2']].values\n",
        "y_test = test_df['y'].values\n",
        "\n",
        "accuracies = []\n",
        "\n",
        "for k in range(1, 31):\n",
        "    y_pred = knn_predict(X_train, y_train, X_test, k)\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    accuracies.append(acc * 100)"
      ],
      "id": "8157c5bd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We plot the accuracy of the KNN model as a function of k to visualize the trend and identify the best k value."
      ],
      "id": "b04bda11"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "plt.plot(range(1, 31), accuracies, marker='o')\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.title('KNN Accuracy on Test Data')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "optimal_k = np.argmax(accuracies) + 1\n",
        "print(f\"Optimal k: {optimal_k} with accuracy: {accuracies[optimal_k-1]:.2f}%\")"
      ],
      "id": "05b32106",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Interpreting KNN Performance Across Different Values of \\( k \\)\n",
        "\n",
        "After training the K Nearest Neighbors (KNN) classifier on our synthetic dataset and evaluating test accuracy across a range of \\( k \\) values, we gain several important insights into how the choice of \\( k \\) affects model performance.\n",
        "\n",
        "Below, we break down the observed trends and provide guidance on selecting an appropriate \\( k \\) in practice.\n",
        "\n",
        "---\n",
        "\n",
        "#### 🔹 Peak Accuracy at \\( k = 1 \\)\n",
        "\n",
        "- The model achieves its **maximum accuracy of approximately 92%** when \\( k = 1 \\).\n",
        "- This is expected because a \\( k = 1 \\) model makes highly localized decisions, perfectly matching the label of the single closest point in the training set.\n",
        "- While this results in excellent performance on the test set here, it may not generalize well in noisier or more complex real-world datasets.\n",
        "\n",
        "---\n",
        "\n",
        "#### 🔹 Rapid Drop in Accuracy from \\( k = 2 \\) to \\( k = 4 \\)\n",
        "\n",
        "- As \\( k \\) increases slightly, accuracy **declines sharply to the 86–87% range**.\n",
        "- This drop illustrates how increasing \\( k \\) reduces model variance but introduces some bias — the predictions become less sensitive to local variations in the data.\n",
        "- The sudden dip suggests that the dataset includes decision boundaries that are non-linear and locally irregular.\n",
        "\n",
        "---\n",
        "\n",
        "#### 🔹 Unstable Region: \\( k = 5 \\) to \\( k = 15 \\)\n",
        "\n",
        "- In this intermediate zone, **accuracy fluctuates without a clear trend**.\n",
        "- The model is likely struggling to balance competing effects: higher \\( k \\) smooths decision boundaries, but the data may not support a consistently simple structure.\n",
        "- These fluctuations imply the presence of subtle patterns that are hard to capture consistently with medium-sized neighborhoods.\n",
        "\n",
        "---\n",
        "\n",
        "#### 🔹 Accuracy Plateau Beyond \\( k \\geq 15 \\)\n",
        "\n",
        "- For \\( k \\) values of 15 and above, **accuracy levels off around 85–86%**.\n",
        "- This flattening indicates that the model is becoming overly generalized — class predictions are based on increasingly broad neighborhoods, leading to **underfitting**.\n",
        "- The model loses sensitivity to the complex, nonlinear boundary in the data and instead produces overly smoothed predictions.\n",
        "\n",
        "---\n",
        "\n",
        "#### 🔹 Striking a Balance: Accuracy vs. Generalization\n",
        "\n",
        "- Although \\( k = 1 \\) provides the **highest accuracy**, it is also the most prone to **overfitting**, especially in real-world applications with noise.\n",
        "- A more balanced choice is to use a **moderately small \\( k \\), such as 3 or 5**, which still offers high accuracy while improving robustness to outliers.\n",
        "- This results in a **better bias-variance trade-off**, essential for reliable generalization to unseen data.\n",
        "\n",
        "---\n",
        "\n",
        "#### 🔸 Summary of Insights\n",
        "\n",
        "- **Best test accuracy**:  \n",
        "  \\( \\mathbf{k = 1} \\), achieving ~92%\n",
        "  \n",
        "- **Recommended practical range**:  \n",
        "  \\( \\mathbf{k = 3} \\) to \\( \\mathbf{k = 5} \\) for improved generalization and reduced risk of overfitting\n",
        "\n",
        "- **Stability zone**:  \n",
        "  Accuracy flattens around 85–86% for \\( k \\geq 15 \\), signaling underfitting\n",
        "\n",
        "Choosing the right \\( k \\) is dataset-dependent, and validation techniques such as **cross-validation** should be used to identify the optimal choice in real-world applications.\n"
      ],
      "id": "06091fba"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/conda/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}